
=============================     ORDER is IMP >> Try Catch Finally + block is imp  =====================================

                                    legal combo
try + catch
try + catch + catch + catch
try + finally
try + catch + finally

curly braces mandatory

==============================   Combo  =================================
try{
   stmt 1;
   stmt 2;
   stmt 3;
}
catch(Class ref) {
   stmt 4;
}
   stmt 5;

// case 1 :- if there is NO exception
  op:- 1,2,3,5 Normal Termination

// case 2 :- exception at stmt 2 + corresponding catch block matched
  op:- 1,4,5 Normal Termination

// case 3 :- exception at stmt 2 + corresponding catch block NOT matched
  op:- 1, Ab-Normal Termination

// case 4 :- exception at stmt 4 + corresponding catch block NOT matched
  op:- 1, Ab-Normal Termination

 ------------------------------------   Multi Catch Block  -----------------------------------
// case 5 :- multiple catch block >> parent to child - IN-VALID
 try{
    stmt 1;
    stmt 2;
    stmt 3;
 }
 catch(Exception e) {  // compile time error :- has already been caught
    stmt 4;
 }
 catch(Arithmetic e1) {
     stmt 5;
  }



// case 6 :- multiple catch block >> both same - IN-VALID
 catch(Arithmetic e) {  // compile time error :- has already been caught
      stmt 4;
   }
 catch(Arithmetic e1) {
       stmt 5;
    }
Compile Time Error :- exception already been caught


// case 7 :- multiple catch block >> child to parent - VALID
  catch(Arithmetic e1 ) {
        stmt 4;
     }
  catch(Exception e) {
         stmt 5;
      }
        stmt 6;
-----------------------------------    Try Catch Finally   ------------------------------------------
// case 8  :- try catch finally  - VALID
  try{
      }
  catch(Exception e){
                    }
  finally{
          }


// case 9  :- try  finally  - VALID
   try{
      }
   finally{
         }

// case 10  :- try  catch  try catch (exception-differ catch-matched) - VALID
    try{
        }
    catch(X e){
         }

    try{
       }
    catch(Y e1){
       }


// case 11  :- try  catch  try catch (exception-same catch-matched) - VALID
    try{
        }
    catch(X e){
        }

    try{
       }
    catch(X e){
       }


// case 12  :- try  catch  try finally (catch-matched) - VALID
    try{
        }
    catch(X e){
        }

    try{
       }
    finally{
       }


// case 13  :- try  IN-VALID
    try{
        }
 compile time error :- try without catch or finally


// case 14  :- catch  IN-VALID
    catch(X e){
        }
compile time error :- catch without try


// case 15  :- finally  IN-VALID
    finally{
    }
compile time error :- finally without try


// case 16  :- try finally catch (catch-matched) - IN-VALID
    try{
        }
    finally{
        }
    catch(X e){
        }
compile time error :- catch without try


// case 17 :- try  stmt catch (catch-matched) - IN-VALID
    try{
        }
    System.out.println("hello");
    catch(X e){
       }
compile time error :- catch without try
                      try without finally


// case 18 :- try catch stmt catch (catch-matched) - IN-VALID
    try{
        }
    catch(X e){
       }
    System.out.println("hello");
    catch(Y e1){
           }
compile time error :- catch without try


// case 19  :- try catch stmt finally  - IN-VALID
  try{
      }
  catch(Exception e){
       }
  System.out.println("hello");
  finally{
          }
compile time error :- finally without try

--------------------------------    try catch finally within each block    -------------------------------------

// case 20   try catch , within try block | catch-matched(inner-outer) - VALID
  try{
        try{
            }
        catch(Exception e){
             }
      }
  catch(Exception e){
       }


// case 21    try , within try block | catch-matched(outer) - IN-VALID
  try{
        try{
            }
      }
  catch(Exception e){
       }
Compiler time error :- try without catch or finally


// case 22   try finally , within try block | catch-matched(outer) - VALID
  try{
        try{
            }
        finally{
             }
      }
  catch(Exception e){
       }


// case 23   try finally , within catch block | catch-matched(outer) - VALID
  try{
      }
  catch(Exception e){
          try{
              }
          finally{
               }
       }


 // case 24    finally , within catch block | catch-matched(outer) - IN-VALID
   try{
       }
   catch(Exception e){
           finally{
                }
        }
Compiler time error :- finally without try


// case 25   try catch , within finally block | catch-matched(inner-outer) - VALID
  try{
      }
  catch(Exception e){
       }
  finally{
       try{
           }
       catch(Exception e){
          }
  }

 // case 26   finally , within finally block | catch-matched(outer) - IN-VALID
   try{
       }
   catch(Exception e){
        }
   finally{
      finally{
      }
   }
 Compile Time Error :- finally without try


  // case 27   multiple finally | catch-matched(outer) - IN-VALID
    try{
        }
    catch(Exception e){
         }
    finally{

      }
    finally{

       }
  Compile Time Error :- finally without try



  // case 28   try stmt(w/o block) catch finally - IN-VALID
      try
        System.out.println("hi");
      catch(Exception e){
           }
      finally{
        }
 Compile Time Error :- syntax error


  // case 29   try  catch stmt(w/o block) finally - IN-VALID
       try{
          }
       catch(Exception e)
         System.out.println("hi");
       finally{
         }
  Compile Time Error :- syntax error


  // case 30   try  catch  finally stmt(w/o block) - IN-VALID
         try{
            }
         catch(Exception e){
           }
         finally
           System.out.println("hi");

    Compile Time Error :- syntax error