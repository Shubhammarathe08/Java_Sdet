
                         Exception

>> unwanted un expected event, that disturbs normal execution of normal flow of the program
>> recommended to handle exception
>> graceful termination of the program
>> defining alternative way to continue rest of the program normally
>> doesn't mean repairing exception

  try {
     read data from remote location
    }
  catch () {
    use local file and continue rst of the program normally
  }

    Exception Format :- name + description + location <backtrack>

>> Method in which Exception raised, responsible for creating and handing over to JVM
   Exception Format :- name + description + location <backtrack>
>> JVM back tracks caller method till it gets exception handling mechanism OR backtrack to main >> JVM finally
>> default exception handler , prints info + terminate program abnormally + removes corresponding entry from stack
>> format :- Exception in thread "main" java.lang.ArithmeticException: / by zero
             	at org.example.exception_handling.ExceptionVsError.doMoreStuff(ExceptionVsError.java:27)
             	at org.example.exception_handling.ExceptionVsError.doStuff(ExceptionVsError.java:22)
             	at org.example.exception_handling.ExceptionVsError.main(ExceptionVsError.java:17)
>> if all methods including main terminates , normally, then only its NORMAL termination
>> most of the time , exceptions are caused by our program
>> Exceptions are recoverable
------------------------------------------------------------------------------------------------------------------------
                              Error

>> errors happen because of lack of system resources
>> most of them are not recoverable
>> being programmer we cant di anything, program will terminate abnormally
>> system admin/server admin responsible for increasing heap memory

------------------------------------------------------------------------------------------------------------------------
                         Good Practises

>> separate catch blocks for different Exception
>> if having parent + child exception | child exception will get chance
   order of catch block
   *** compile time error :- exception already caught
   child1 >> child2 >> parent -  Valid
   parent >> child1 >> child2 - IN Valid  | exception already caught
>>   try{
         stmt 1
         stmt 2 // try block with multiple catch | possible and recommended to use
       }
    catch(E e1){
      }
    catch(D e2){
      }
-------------------------------------------------------------------------------------------------------------------------
                      Common Exceptions

1. ArrayIndexOutOfBoundException
>> child of RunTime Exception | unchecked
>> auto raised by JVM , when accessing out of range ele Array


2. NullPointerException
>> child of RunTime Exception | unchecked
>> auto raised by JVM , when we try to perform any operation on Null value

3. ClassCastException
>> child of RunTime Exception | unchecked
>> auto raised by JVM , when we try to typecast parent Obj to Child type

4. StackOverflowError
>> child of Error  | unchecked
>> auto raised by JVM , when recursive method calls occurs

5. NoClassDefFoundError
>> child of Error  | unchecked
>> auto raised by JVM , when .class files doesn't exist /not found ny JVM

6. ExceptionInInitializerError
>> child of Error  | unchecked
>> auto raised by JVM , executing static blocks/static methods

7. IllegalArgumentException
>> child of RunTime Exception | unchecked
>> auto raised by JVM , raised explicitly by programmer/API developer to indicate method invoked with illegal argument

8. NumberFormatException
>> child of RunTime Exception | unchecked
>> auto raised by JVM , raised explicitly by programmer/API developer to indicate method invoked with illegal argument

9. IllegalStateException
>> child of RunTime Exception | unchecked
>> auto raised by JVM , raised explicitly either by programmer/api developer method invoked at wrong time

10. AssertionError
>> child of Error  | unchecked
>> auto raised by JVM , raised explicitly either by programmer/api developer for assert statement failed

