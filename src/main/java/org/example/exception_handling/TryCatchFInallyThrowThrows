
// try block
 block to handle risky code
 code which may rise an exception
 ** if exception raised , rest of the try block , wont be executed, even though we handle exception
  take very risky code only
  length should be as small as possible
  enclose within multiple/separate try catch

 ** if exception raised outside anywhere Try block >> Ab-Normal Termination

Try
{
}
---------------------------------------------------------------------------------------------------------
// catch block
corresponding block to handle exception ( which may rise in try block )
after catch, it won't go back to statement where exception raised + resume working - XXX
it will move forward

if exception raised within catch block  ( * no mechanism to handle exception ) >> Ab-Normal termination

catch (Object o){
  continuation code
}
-----------------------------------------------------------------------------------------------------------------
// finally block
will execute in case of normal or abnormal termination
if exception raised within finally block  ( * no mechanism to handle exception ) >> Ab-Normal termination

*** Except -  JVM closes
              System.exit(0);
------------------------------------------------------------------------------------------------------------------
                                                Throw

Throw - handover our (explicitly)created exception object to JVM manually | ** not automatically
Throwing - Exception Object
Who is throwing - programmer
Who is catching - JVM

programmer create exception object handover to JVM programmatically/manually

exception object created by - programmer  explicitly
exception object handed over to JVM  by - programmer  explicitly
op :- same as automatically thrown exception by responsible method

best for user defined exceptions

        try{
            throw ce;
           //  System.out.println(" check ");
        }
        catch(ClassCastException e){
            System.out.println(" class cast exception e captured 1");
        }
*** After Throw >> no stmt will work directly >> compile time error - Unreachable Code
** cant Throw any exception object | Exception and Error
    Throw new Test(); // compile time error :- incompatible type

** to Throw any type, make that class whose object u want to throw
   CHILD class of Throwable or any Exception or Error

   if u extends CustomClass to checked/partially/fully Exception Object
   Throwable , Exception , Io , Interrupted
   >> u will get compile time error - to handle or declare throws


   if u extends CustomClass to  unchecked Exception Object
   RuntimeException , Error
   >> u will NOT get compile time error - to handle or declare throws

-----------------------------------------------------------------------------------------------------------------------
                                                        Throws

>> used with - constructor + method | ** Not Class
>> can Throws >> Throwable Class
>> in our program if there is any ** chance of throwing CHECKED exception
   Compiler will check >> is it handled ?
                           did caller method handled ?
                           declared Throws Exception ?
   if not - it will throw compile time error
   compile time error :-
                java: unreported exception org.example.exception_handling.ClassName; must be caught or declared to be thrown

   ex. Thread.sleep(10000);
   handled >> public static void main(String[] args) throws CustomClass2, InterruptedException
   if not handled >> java: unreported exception java.lang.InterruptedException; must be caught or declared to be thrown


>> use of Throws - delegate responsibility of exception handling to caller
                                        caller - may be main() , jvm or any other method
>> only for CHECKED exception , only to convince compiler
>> No impact for UN-CHECKED exception
>> if actually Exception occurs at Runtime, if not handled, Ab-Normal termination
>> compiler suggestion :- 1. Try Catch  Finally
                 *** compiler doesn't care if catch actually handles or not, it will not throw CE error
                 2. declare Throws Exception, caller method will take care of it
                 *** Throws ExceptionName, delegate responsibility of exception handling to caller
                     caller - may be main() , jvm or any other method
>> Better to use Try Catch Finally - Normal Termination
>> CustomClass extends Throwable {
    CustomClass(String s){
    super(s);
    }
}
// super(s) >> make our string description available to default exception handler
---------------------------------------------------------------------------------------------------------

