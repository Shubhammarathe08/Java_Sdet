
1. Test Scenario vs Test case

| **Aspect**  | **Test Scenario**                  | **Test Case**                                                   |
| ----------- | ---------------------------------- | --------------------------------------------------------------- |
| **Level**   | High-level                         | Detailed level                                                  |
| **Content** | What to test                       | How to test                                                     |
| **Detail**  | Describes functionality or feature | Contains steps, inputs, expected results                        |
| **Purpose** | Ensure coverage of requirements    | Validate functionality with defined conditions                  |
| **Example** | Verify login functionality         | Enter username and password, click login, expect dashboard page |

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. verification vs validation

 | **Aspect**       | **Verification**                                     | **Validation**
 | ---------------- | -----------------------------------------------------| -----------------------------------------------------
 | **Definition**   | Checking **documents, design, code**                 | Testing the **actual product by executing code**
                      without execution to ensure                            to ensure it meets **customer needs**.
                      **requirements are correctly implemented**.

 | **Type**         | **Static testing** (reviews, walkthroughs inspection)| **Dynamic testing** (black box, functional tests).
 | **Focus**        | **"Are we building the product right?"**              | **"Are we building the right product?"**
 | **Performed By** | QA team (reviewers, analysts).                        | Testing team (testers, QA).
 | **When**         | Done **before validation**, early phase in SDLC.      | Done **after verification**, on the working product.
 | **Example**      | Reviewing BRS, SRS, design documents.                 | Testing login functionality on actual app.|

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 3.  test technique vs test plan

 | **Aspect**     | **Test Technique**                                                                 | **Test Strategy**                                                                                                                                                                                                                                                                                              |
 | -------------- | -----------------------------------------------------------------------------------| ----------------------------------------------------------------------------------
 | **Definition** | Methods to **design effective test cases**.                                        | **High-level plan** for testing approach in the project.                                                                                                                                                                                                                                                       |
 | **Purpose**    | To **identify test conditions and design cases** to find defects efficiently.      | To define **what, when, how, and who** for all testing activities.                                                                                                                                                                                                                                             |
 | **Level**      | Low-level, execution-focused.                                                      | High-level, management-focused.                                                                                                                                                                                                                                                                                |
 | **Example**    | **Equivalence Partitioning**:                                                      | **Strategy for Banking App Project**:
                     17 (invalid), 18 (valid), 30 (valid), 60 (valid), 61 (invalid).                      Perform unit, integration, system, UAT testing , Use Selenium for automation
                    Testing input field accepting ages 18-60 by choosing representative values like       Performance testing with JMeter ,Defect tracking with JIRA , Entry criteria: code complete, build deployed

 | **Focus**      | **How to design test cases** for maximum coverage.                                 | **Overall approach and guidelines** for testing the entire application.                                                                                                                                                                                                                                        |

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4. test strategy vs test plan

| **Aspect**         | **Test Strategy**                                                                                                                                                                                                                                                                                                                                                                                                                                         | **Test Plan|
| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ||
| **Definition**     | High-level organisational document defining the **overall testing approach and standards** across projects.                                                                                                                                                                                                                                                                                                                                               | Project-specific document detailing **how testing will be executed for a particular application or release**.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| **Purpose**        | Provides **direction and guidelines for testing activities** organisation-wide.                                                                                                                                                                                                                                                                                                                                                                           | Defines **detailed actions, resources, schedule, and scope for testing** in a specific project.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
| **Level**          | High-level, generic, static document.                                                                                                                                                                                                                                                                                                                                                                                                                     | Detailed, specific, dynamic document updated per project needs|
| **Prepared By**    | **Test Managers or Senior Management** at organisational or program level.                                                                                                                                                                                                                                                                                                                                                                                | **Test Lead or QA Manager** for a specific project or release.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| **Contents**       | - **Objectives**: Why testing is needed (overall goals for quality assurance). <br> - **Scope**: Areas covered under testing (types and levels of testing). <br> - **Approach**: Overall strategy, standards, tools to be used. <br> - **Test Levels**: Unit, integration, system, UAT. <br> - **Roles & Responsibilities**: Who will do what at an organisational level. <br> - **Tools**: Approved tools for automation, performance, security testing. | - **Objectives**: Why this project’s testing is needed (e.g. verify new features). <br> - **Scope**: What features will and won’t be tested in this release. <br> - **Approach**: How testing will be conducted (manual, automation, types of testing). <br> - **Test Items**: Specific modules or features under test. <br> - **Schedule**: Timeline for testing activities. <br> - **Resources**: Team members assigned. <br> - **Entry & Exit Criteria**: When testing starts/stops. <br> - **Environment**: Test setups required. <br> - **Risks & Mitigation**: Possible issues and handling plan. |
| **Example**        | Organisation mandates all projects undergo functional, security, and performance testing using **Selenium, OWASP ZAP, and JMeter**, with defect management in **JIRA**.                                                                                                                                                                                                                                                                                   | For ABC Banking app release v1.2: <br> - **Features**: Login, Dashboard, Fund Transfer <br> - **Approach**: Manual + Selenium automation <br> - **Timeline**: 5th to 20th July <br> - **Entry Criteria**: Build deployed and stable <br> - **Exit Criteria**: All critical defects closed <br> - **Risks**: Environment downtime.                                                                                                                                                                                                                                                                       |
| **Approval Level** | Approved by **senior management or program QA heads**.                                                                                                                                                                                                                                                                                                                                                                                                    | Approved by **Project Manager, QA Manager, and client (if needed|

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. incremental vs iterative

| **Aspect**   | **Incremental SDLC**                             | **Iterative SDLC**                                               |
| ------------ | ------------------------------------------------ | ---------------------------------------------------------------- |
| **Approach** | Build system in **small functional increments**. | Build **entire system in basic form**, refine in iterations.     |
| **Focus**    | **Adding new features with each increment**.     | **Improving existing features with each iteration**.             |
| **Output**   | Each increment adds a **new feature/module**.    | Each iteration produces a **better version of the same system**. |
| **Example**  | Add login → dashboard → reports                  | Build full app v1 → improve UI v2 → add validations v3           |

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

6. smoke (stable build and critical leakage) vs sanity (check health of application)
| **Aspect**         | **Smoke Testing**                                                                         | **Sanity Testing**                                                                                            |
| ------------------ | ----------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| **Definition**     | A **quick, basic check** to verify if the **build is stable enough for further testing**. | A **narrow, focused check** to verify **specific functionality or bug fixes** work as expected after changes. |
| **Purpose**        | To ensure **critical functionalities work and build is testable**.                        | To ensure **new functionalities or bug fixes work correctly** without detailed regression.                    |
| **Performed When** | **New build is received** to decide whether to accept it for further testing.             | After **receiving a minor release or bug fix** to verify correctness.                                         |
| **Coverage**       | **Wide coverage**, shallow testing across major features.                                 | **Deep coverage**, narrow testing on specific modules or features.                                            |
| **Performed By**   | Testers (sometimes developers for initial build checks).                                  | Testers.                                                                                                      |
| **Example**        | In a banking app, checking if login page loads, dashboard opens, and logout works.        | After fixing a bug in the fund transfer module, checking only fund transfer functionality to confirm the fix. |
| **Time Taken**     | Quick – **30 mins to few hours**.                                                         | Also quick, but more focused – **few mins to an hour**.                                                       |
| **Documentation**  | Often **documented as build verification tests**.                                         | Usually **not formally documented**, done for confidence before regression.                                   |
| **Other Name**     | **Build Verification Testing (BVT)**.                                                     | **Subset of regression testing**.                                                                             |

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

7. Re-testing (checked failed test cases ) vs Regression Testing
| **Aspect**               | **Re-testing**                                                                              | **Regression Testing**                                                                                                                       |
| ------------------------ | ------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| **Definition**           | Testing **failed test cases again** after fixing defects to confirm the defect is resolved. | Testing existing functionalities to ensure **new changes have not introduced defects** in previously working areas.                          |
| **Purpose**              | To verify **bug fix works as expected**.                                                    | To check that **unchanged parts of the application still work correctly** after new changes.                                                 |
| **Test Cases**           | Same test cases which previously failed are re-executed.                                    | Test cases covering **affected modules and related areas** are executed.                                                                     |
| **Planned or Unplanned** | **Not planned** – executed only when defects are fixed.                                     | **Planned testing activity** in test strategy after any changes or enhancements.                                                             |
| **Performed When**       | After a defect fix is deployed.                                                             | After **any new feature, bug fix, or enhancement** deployment.                                                                               |
| **Example**              | Login failed due to incorrect password validation logic – tester re-tests after fix.        | After changing password validation logic, regression tests ensure that registration, reset password, and login flows are still working fine. |
