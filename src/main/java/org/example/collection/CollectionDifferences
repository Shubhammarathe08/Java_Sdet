âœ… ğŸ”· 1. List (Interface)
ğŸ”¹ Definition: Ordered collection allowing duplicate elements.
ğŸ”¹ Introduced in: Java 1.2
ğŸ”¹ Key Points:
Maintains insertion order.
Allows positional access via index.
Implemented by ArrayList, LinkedList, Vector, Stack.
ğŸ”¹ Common Methods:
add(), addAll(), get(), set(), remove(), clear(), size(), isEmpty()
indexOf(), lastIndexOf(), subList(), contains()
ğŸ”¹ Ordering: Maintains insertion order.

âœ… ğŸ”· 2. ArrayList (Class)
ğŸ”¹ Definition: Resizable array implementation of List.
ğŸ”¹ Introduced in: Java 1.2
ğŸ”¹ Synchronization: Not synchronized, thread-unsafe.
ğŸ”¹ Null Handling: Allows null elements.
ğŸ”¹ Ordering: Maintains insertion order.
ğŸ”¹ Performance: Fast random access (O(1)), slow inserts/deletes in middle (O(n)).
ğŸ”¹ Default Capacity: 10
ğŸ”¹ Constructors:
ArrayList()
ArrayList(int initialCapacity)
ArrayList(Collection<? extends E> c)
ğŸ”¹ Use Case: Frequent retrieval operations.

âœ… ğŸ”· 3. LinkedList (Class)
ğŸ”¹ Definition: Doubly-linked list implementation of List and Deque.
ğŸ”¹ Introduced in: Java 1.2
ğŸ”¹ Synchronization: Not synchronized.
ğŸ”¹ Null Handling: Allows null elements.
ğŸ”¹ Ordering: Maintains insertion order.
ğŸ”¹ Performance: Fast insert/delete anywhere (O(1)), slow random access (O(n)).
ğŸ”¹ Constructors:
LinkedList()
LinkedList(Collection<? extends E> c)
ğŸ”¹ Use Case: Frequent insertion/deletion, queue or stack operations.

âœ… ğŸ”· 4. Vector (Class)
ğŸ”¹ Definition: Legacy dynamic array, similar to ArrayList but synchronized.
ğŸ”¹ Introduced in: Java 1.0
ğŸ”¹ Synchronization: Synchronized, thread-safe.
ğŸ”¹ Null Handling: Allows null elements.
ğŸ”¹ Ordering: Maintains insertion order.
ğŸ”¹ Performance: Slower than ArrayList due to synchronization.
ğŸ”¹ Default Capacity: 10
ğŸ”¹ Constructors:
Vector()
Vector(int initialCapacity)
Vector(int initialCapacity, int capacityIncrement)
Vector(Collection<? extends E> c)
ğŸ”¹ Use Case: Legacy multi-threaded code.

âœ… ğŸ”· 5. Stack (Class)
ğŸ”¹ Definition: Legacy LIFO stack extending Vector.
ğŸ”¹ Introduced in: Java 1.0
ğŸ”¹ Synchronization: Synchronized.
ğŸ”¹ Null Handling: Allows null elements.
ğŸ”¹ Ordering: LIFO order.
ğŸ”¹ Performance: Slower due to synchronization.
ğŸ”¹ Constructors:
Stack()
ğŸ”¹ Unique Methods:
push(E item), pop(), peek(), empty(), search(Object o)
ğŸ”¹ Use Case: Stack operations (LIFO).

âœ… ğŸ”· 6. Queue (Interface)
ğŸ”¹ Definition: Collection for holding elements prior to processing (FIFO).
ğŸ”¹ Introduced in: Java 1.5
ğŸ”¹ Key Points:
Implemented by LinkedList, PriorityQueue, ArrayDeque.
ğŸ”¹ Common Methods:
offer(), poll(), peek(), remove(), element()
ğŸ”¹ Ordering: Depends on implementation (FIFO for LinkedList and ArrayDeque, priority order for PriorityQueue).

âœ… ğŸ”· 7. PriorityQueue (Class)
ğŸ”¹ Definition: Unbounded priority queue based on heap.
ğŸ”¹ Introduced in: Java 1.5
ğŸ”¹ Synchronization: Not synchronized.
ğŸ”¹ Null Handling: Does not allow null elements.
ğŸ”¹ Ordering: Natural ordering or custom Comparator.
ğŸ”¹ Constructors:
PriorityQueue()
PriorityQueue(int initialCapacity)
PriorityQueue(int initialCapacity, Comparator<? super E> comparator)
PriorityQueue(Collection<? extends E> c)
ğŸ”¹ Use Case: Priority-based processing tasks.

âœ… ğŸ”· 8. ArrayDeque (Class)
ğŸ”¹ Definition: Resizable array implementation of Deque interface.
ğŸ”¹ Introduced in: Java 1.6
ğŸ”¹ Synchronization: Not synchronized.
ğŸ”¹ Null Handling: Does not allow null elements.
ğŸ”¹ Ordering: Maintains insertion order.
ğŸ”¹ Constructors:
ArrayDeque()
ArrayDeque(int initialCapacity)
ArrayDeque(Collection<? extends E> c)
ğŸ”¹ Use Case: Stack or queue with better performance than Stack or LinkedList.

âœ… ğŸ”· 9. Set (Interface)
ğŸ”¹ Definition: Collection that does not allow duplicate elements.
ğŸ”¹ Introduced in: Java 1.2
ğŸ”¹ Implemented by: HashSet, LinkedHashSet, TreeSet.
ğŸ”¹ Common Methods:
add(), remove(), clear(), contains(), size(), isEmpty(), iterator()
ğŸ”¹ Ordering: Defined by implementation.

âœ… ğŸ”· 10. HashSet (Class)
ğŸ”¹ Definition: Hash table-based Set implementation.
ğŸ”¹ Introduced in: Java 1.2
ğŸ”¹ Synchronization: Not synchronized.
ğŸ”¹ Null Handling: Allows one null element.
ğŸ”¹ Ordering: No guaranteed order.
ğŸ”¹ Performance: O(1) average for add/remove/contains.
ğŸ”¹ Constructors:
HashSet()
HashSet(Collection<? extends E> c)
HashSet(int initialCapacity)
HashSet(int initialCapacity, float loadFactor)
ğŸ”¹ Use Case: General-purpose set without duplicates.

âœ… ğŸ”· 11. LinkedHashSet (Class)
ğŸ”¹ Definition: Extends HashSet with insertion order maintained.
ğŸ”¹ Introduced in: Java 1.4
ğŸ”¹ Synchronization: Not synchronized.
ğŸ”¹ Null Handling: Allows one null element.
ğŸ”¹ Ordering: Maintains insertion order.
ğŸ”¹ Performance: Slightly slower than HashSet.
ğŸ”¹ Constructors:
LinkedHashSet()
LinkedHashSet(Collection<? extends E> c)
LinkedHashSet(int initialCapacity)
LinkedHashSet(int initialCapacity, float loadFactor)
ğŸ”¹ Use Case: Ordered set without duplicates.

âœ… ğŸ”· 12. SortedSet (Interface)
ğŸ”¹ Definition: Extends Set to maintain elements in sorted order.
ğŸ”¹ Introduced in: Java 1.2
ğŸ”¹ Implemented by: TreeSet
ğŸ”¹ Unique Methods:
first(), last(), headSet(), tailSet(), subSet()
ğŸ”¹ Ordering: Natural order or custom Comparator.

âœ… ğŸ”· 13. TreeSet (Class)
ğŸ”¹ Definition: Implements SortedSet using TreeMap internally (Red-Black tree).
ğŸ”¹ Introduced in: Java 1.2
ğŸ”¹ Synchronization: Not synchronized.
ğŸ”¹ Null Handling: Does not allow null elements.
ğŸ”¹ Ordering: Natural or Comparator order.
ğŸ”¹ Performance: O(log n) for add/remove/contains.
ğŸ”¹ Constructors:
TreeSet()
TreeSet(Comparator<? super E> comparator)
TreeSet(Collection<? extends E> c)
TreeSet(SortedSet<E> s)
ğŸ”¹ Use Case: Sorted unique elements.